// Package mutex предоставляет простую реализацию мьютекса на основе атомарных операций.
package mutex

import (
	"runtime"
	"sync/atomic"
)

// Mutex представляет примитив взаимного исключения.
// Поле state принимает значение 0 (разблокирован) или 1 (заблокирован).
type Mutex struct {
	state int32
}

// Lock пытается захватить мьютекс.
// Если мьютекс уже занят, функция активно ожидает освобождения, вызывая runtime.Gosched() для уступки процессорного времени.
func (m *Mutex) Lock() {
	// Цикл до тех пор, пока не удастся атомарно установить state из 0 в 1.
	for !atomic.CompareAndSwapInt32(&m.state, 0, 1) {
		// Уступаем выполнение другим горутинам, предотвращая жесткий цикл ожидания.
		runtime.Gosched()
	}
}

// Unlock освобождает мьютекс, устанавливая state в 0.
// Важно: Unlock должен вызываться только после успешного Lock.
func (m *Mutex) Unlock() {
	atomic.StoreInt32(&m.state, 0)
}
